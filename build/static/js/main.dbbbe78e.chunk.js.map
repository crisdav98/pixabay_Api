{"version":3,"sources":["components/Error.js","components/Formulario.js","components/Imagen.js","components/ListadoImagenes.js","App.js","serviceWorker.js","index.js"],"names":["Error","mensaje","className","Formulario","guardarTermino","useState","tema","guardarTema","error","guardarError","onSubmit","e","preventDefault","trim","type","placeholder","onChange","target","value","Imagen","imagen","largeImageURL","likes","previewURL","tags","views","src","alt","href","rel","ListadoImagenes","listaImagenes","map","key","id","App","termino","guardarListaImagenes","paginaActual","guardarpaginaActual","totalPaginas","guardartotalPaginas","useEffect","a","imagenerPorPagina","url","fetch","resultado","json","imagenes","hits","calcularTotalPaginas","Math","ceil","totalHits","document","querySelector","scrollIntoView","behavior","consultarApi","onClick","nuevaPaginaActual","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dbbbe78e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Error = ({mensaje}) => {\r\n    return (\r\n        <p className=\"my-3 p-4 text-center alert alert-primary\">{mensaje}</p>\r\n    );\r\n};\r\n\r\nexport default Error;","import React,{useState} from 'react';\r\nimport Error from './Error';\r\n\r\nconst Formulario = ({guardarTermino}) => {\r\n    // State del formulario\r\n    const [tema,guardarTema] = useState('');\r\n    const [error,guardarError] = useState(false)\r\n\r\n    // consulta a la api\r\n    const buscarImagenes = e =>{\r\n        e.preventDefault();\r\n        //Validar que este lleno el campo\r\n        if(tema.trim() === ''){\r\n            guardarError(true);\r\n            return\r\n\r\n        }\r\n        // Enviar el término de búsqueda al componente principal\r\n        guardarError(false);\r\n        guardarTermino(tema);\r\n    }\r\n    return (\r\n        <form\r\n            onSubmit={buscarImagenes}\r\n        >\r\n            <div className=\"row\">\r\n                <div className=\"form-group col-md-8\">\r\n                    <input \r\n                        type=\"text\"\r\n                        className=\"form-control form-control-lg\"\r\n                        placeholder=\"Buscador de Imágen, ejemplo: Futbol o café\"\r\n                        onChange={e=>guardarTema(e.target.value)}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"form-group col-md-4\">\r\n                    <input \r\n                        type=\"submit\"\r\n                        className=\"btn btn-lg btn-danger btn-block\"\r\n                        value=\"Buscar\"\r\n                    />\r\n                </div>\r\n            </div>\r\n            {error ? <Error mensaje=\"Agrega un término de Búsqueda\"/> : null}\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default Formulario;","import React from 'react';\r\n\r\nconst Imagen = ({imagen}) => {\r\n\r\n    //Aplicamos destructuring para extraer variables\r\n    const {largeImageURL, likes, previewURL,tags, views}= imagen;\r\n    return (\r\n        <div className=\"col-12 col-sm-6 col-md-4 col-lg-3 mb-4\">\r\n            <div className=\"card\">\r\n                <img src={previewURL} alt={tags} className=\"card-image-top\" />\r\n                <div className=\"card-body\">\r\n                    <p className=\"card-text\">{likes} Me Gusta</p>\r\n                    <p className=\"card-text\">{views} Vistas</p>\r\n                </div>\r\n\r\n                <div className=\"card-footer\">\r\n                    <a\r\n                        href={largeImageURL}\r\n                        target=\"_blank\"\r\n                        rel=\"noopener noreferrer\"\r\n                        className=\"btn btn-primary btn-block\"\r\n                    >Ver Imagen</a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Imagen;","import React from 'react';\r\nimport Imagen from './Imagen';\r\n\r\nconst ListadoImagenes = ({listaImagenes}) => {\r\n    return (\r\n        <div className=\"col-12 p-5 row\">\r\n            {listaImagenes.map(imagen =>(\r\n                <Imagen \r\n                    key={imagen.id}\r\n                    imagen={imagen}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ListadoImagenes;","import React, { useState, useEffect } from \"react\";\nimport Formulario from \"./components/Formulario\";\nimport ListadoImagenes from \"./components/ListadoImagenes\";\n\nfunction App() {\n  // State del App\n  const [termino, guardarTermino] = useState(\"\");\n  const [listaImagenes, guardarListaImagenes] = useState([]);\n  const [paginaActual, guardarpaginaActual] = useState(1);\n  const [totalPaginas, guardartotalPaginas] = useState(1);\n\n  // Consulta a la API\n  useEffect(() => {\n    // Método para cpnsultar la API\n    const consultarApi = async () => {\n      // Evitar que se ejecute la primera vez\n      if (termino === \"\") return;\n      const imagenerPorPagina = 30;\n      const key = \"15103300-a3832cae14f6a2296e75068f4\";\n      const url = `https://pixabay.com/api/?key=${key}&q=${termino}&per_page=${imagenerPorPagina}&page=${paginaActual}`;\n\n      // Consultar la api\n      const resultado = await fetch(url);\n      const imagenes = await resultado.json();\n      guardarListaImagenes(imagenes.hits);\n\n      // calcular el total del paginas\n      const calcularTotalPaginas = Math.ceil(\n        imagenes.totalHits / imagenerPorPagina\n      );\n      guardartotalPaginas(calcularTotalPaginas);\n      // mover la pantalla hacia arriba\n      const jumbotron = document.querySelector(\".jumbotron\");\n      jumbotron.scrollIntoView({ behavior: 'smooth' });\n    };\n    consultarApi();\n  }, [termino, paginaActual]);\n\n  // Definir la página anterior\n  const paginaAnterior = () => {\n    const nuevaPaginaActual = paginaActual - 1;\n    if (nuevaPaginaActual === 0) return;\n    guardarpaginaActual(nuevaPaginaActual);\n  };\n  const paginaSiguiente = () => {\n    const nuevaPaginaActual = paginaActual + 1;\n    if (nuevaPaginaActual > totalPaginas) return;\n    guardarpaginaActual(nuevaPaginaActual);\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"jumbotron\">\n        <p className=\"lead text-center\">Buscador de Imágenes</p>\n        <Formulario guardarTermino={guardarTermino} />\n      </div>\n      <div className=\"row justify-content-center\">\n        <ListadoImagenes listaImagenes={listaImagenes} />\n        {paginaActual === 1 ? null : (\n          <button\n            type=\"button\"\n            className=\"bbtn btn-info mr-1\"\n            onClick={paginaAnterior}\n          >\n            &laquo;Anterior\n          </button>\n        )}\n\n        {paginaActual < totalPaginas ? (\n          <button\n            type=\"button\"\n            className=\"bbtn btn-info\"\n            onClick={paginaSiguiente}\n          >\n            Siguiente &raquo;\n          </button>\n        ) : null}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}